if [[ -z $VERSION ]] ; then
	echo "VERSION must be set as an environment variable"
	exit 1
fi
PROJECT="${PROJECT:-foreman}"
PROJECTDIR="releases/$PROJECT"
RELEASEDIR="${PROJECTDIR}/${VERSION}"

load_settings() {
  # load user local settings
  if [[ -f "settings.local" ]]; then
    . "settings.local"
  fi

  # load project specific settings first
  if [[ -f "${PROJECTDIR}/settings" ]]; then
    . "${PROJECTDIR}/settings"
  fi

  # Load settings per release
  # Expected: FULLGPGKEY
  # Optional: FULLVERSION
  . "$RELEASEDIR/settings"
}

# Prepare settings file
if [[ ! -d "$RELEASEDIR" ]] ; then
	mkdir -p "$RELEASEDIR"
	echo "FULLVERSION='${VERSION}.0-rc1'" > "$RELEASEDIR/settings"
fi

if [[ $PROJECT != foreman ]]; then
  load_settings
  if [[ -z "$FOREMAN_VERSION" ]]; then
    echo "please set FOREMAN_VERSION in $RELEASEDIR/settings"
    exit 1
  elif [[ "$FOREMAN_VERSION" != "none" ]]; then
    # load foreman settings, which will contain keys etc
    . "releases/foreman/${FOREMAN_VERSION}/settings"
  fi
else
  FOREMAN_VERSION="$VERSION"
fi

SIGNER="packages@theforeman.org"
SIGNER_NAME="Foreman Automatic Signing Key"
OSES="el8"
RPMDIR="$RELEASEDIR/rpms"
KEYDIR="$RELEASEDIR/gnupg"
GNUPGHOME="$KEYDIR"
TARDIR="$RELEASEDIR/tarballs"
EXTRASDIR="$RELEASEDIR/extras"
HOSTS="web01.osuosl.theforeman.org,"
DOCROOT="/var/www/vhosts/downloads/htdocs"
PASS_NAME_GPG="theforeman/releases/foreman/$FOREMAN_VERSION-gpg"
PASS_NAME_KEY="theforeman/releases/foreman/$FOREMAN_VERSION-key"
XARGS_JOBS="-n 20 -P 4"
GIT_DIR="${GIT_DIR:-$HOME/dev}"
GIT_USE_WORKTREES=false
GIT_REMOTE="${GIT_REMOTE:-upstream}"
GIT_DEVELOP_BRANCH=develop
GIT_STABLE_BRANCH="${VERSION}-stable"
GITHUB_NAMESPACE=theforeman
PACKAGING_DIR="$GIT_DIR/foreman-packaging"
PACKAGING_GIT_REMOTE=origin
TAR_PROJECTS=""
RPM_PACKAGES=()
KOJI_CMD="${KOJI_CMD:-koji}"
KOJI_TAGS=""
KOJI_SSH_TARGET="root@koji.katello.org"
PACKAGING_PR=${PACKAGING_PR:-true}
GPG_EXPIRE="1y"

load_settings

# Short GPGKEY is used by koji and is the last 8 chars or the full key
GPGKEY="$(echo ${FULLGPGKEY: -8} | tr '[A-Z]' '[a-z]')"
HALFGPGKEY="$(echo ${FULLGPGKEY: -16} | tr '[A-Z]' '[a-z]')"

show_gpg_password() {
	gopass show --password "$PASS_NAME_GPG"
}

gpg_with_password() {
	gpg2 --pinentry-mode loopback --passphrase-file <(show_gpg_password) "$@"
}

# Invoke ansible-playbook with ansible_become_password set safely
ansible_playbook() {
        local password_file
        password_file=$(mktemp --suffix=.json)
        chmod 0600 "$password_file"

	gopass show --password "theforeman/unix" | ruby -rjson -e 'puts({"ansible_become_password" => STDIN.read}.to_json)' > "$password_file"

	ansible-playbook --extra-vars="@${password_file}" "$@"
	shred --remove "${password_file}"
}

require_fullversion() {
	if [[ -z $FULLVERSION ]] ; then
		echo "FULLVERSION is required for this script"
		exit 1
	fi
}

# vim: ft=sh
