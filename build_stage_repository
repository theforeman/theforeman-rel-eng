#!/usr/bin/env python3

from email.utils import parsedate_to_datetime
from subprocess import check_output, STDOUT, CalledProcessError
from urllib.request import urlretrieve
from urllib.error import ContentTooShortError
import os
import yaml
import glob
import shutil
import time
import hashlib
import sys
import tempfile
import dnf.comps
import argparse


def filter_packages(target_dir, packages):
    files = glob.glob(f"{target_dir}/*.rpm")

    for file in files:
        file_name = os.path.basename(file)
        rpm_name = get_rpm_name(file)

        if rpm_name not in packages:
            print(f"Removed {rpm_name}. Package not in comps.")
            os.remove(os.path.join(target_dir, file_name))


def get_rpm_name(rpm):
    command = [
        'rpmquery',
        '--nosignature',
        '--queryformat',
        '%{name}',
        '--package',
        rpm
    ]

    return check_output(command, universal_newlines=True)


def modulemd_yaml(collection, version, foreman_version, dist):
    branch = 'develop' if foreman_version == 'nightly' else foreman_version

    path, headers = urlretrieve(f"https://raw.githubusercontent.com/theforeman/foreman-packaging/rpm/{branch}/modulemd/modulemd-{collection}-{dist}.yaml")
    return path


def comps(collection, version, dist, foreman_version):
    branch = 'develop' if foreman_version == 'nightly' else foreman_version
    repo = 'foreman-packaging'
    name = collection

    if collection == 'client':
        name = 'foreman-client'
    elif collection == 'plugins':
        name = 'foreman-plugins'
    elif collection == 'candlepin':
        repo = 'candlepin-packaging'
        branch = version if version != 'nightly' else branch
    elif collection == 'pulpcore':
        repo = 'pulpcore-packaging'
        branch = 'develop' if version == 'nightly' else version

    if collection == 'client' and dist == 'el7':
        dist = 'rhel7'

    url = f"https://raw.githubusercontent.com/theforeman/{repo}/rpm/{branch}/comps/comps-{name}-{dist}.xml"
    print(f"Fetching comps: {url}")
    path, headers = urlretrieve(url)
    return path


def generate_modulemd_version(version):
    if version == 'nightly':
        modulemd_version_prefix = '9999'
    else:
        major, minor = version.split('.')
        modulemd_version_prefix = int(major)*100 + int(minor)

    modulemd_version_string = time.strftime(f"{modulemd_version_prefix}%Y%m%d%H%M%S", time.gmtime())

    return int(modulemd_version_string)


def generate_modulemd_context(collection, version):
    context_string = f"{collection}-{version}"
    digest = hashlib.sha256(context_string.encode()).hexdigest()
    return digest[:8]


def create_modulemd(collection, version, stage_dir, foreman_version, dist):
    print("Adding modulemd to stage repository")
    cmd = [
        'rpm',
        '--nosignature',
        '--query',
        '--package',
        f"{stage_dir}/*.rpm",
        "--queryformat=%{name}-%{epochnum}:%{version}-%{release}.%{arch}\n"
    ]
    output = check_output(cmd, universal_newlines=True)

    with open(modulemd_yaml(collection, version, foreman_version, dist), 'r') as file:
        modules = list(yaml.safe_load_all(file))

    module_version = generate_modulemd_version(version)
    module_context = generate_modulemd_context(collection, version)

    for module in modules:
        module['data']['version'] = module_version
        module['data']['context'] = module_context
        if module['data']['name'] == collection:
            module['data']['artifacts'] = {'rpms': output.splitlines()}

    modules_yaml = os.path.join(stage_dir, 'repodata', 'modules.yaml')

    with open(modules_yaml, 'w') as modules_file:
        yaml.dump_all(modules, modules_file, default_flow_style=False, explicit_start=True, explicit_end=True)

    try:
        check_output(['modifyrepo_c', '--compress-type=gz', '--mdtype=modules', modules_yaml, f"{stage_dir}/repodata"], stderr=STDOUT)
    except CalledProcessError as e:
        print(e.output)
        raise


def create_repository(repo_dir):
    try:
        check_output(['createrepo_c', "--general-compress-type=gz", "--database" ,repo_dir], stderr=STDOUT)
    except CalledProcessError as e:
        print(e.output)
        raise


def sync_prod_repository(collection, version, target_dir, dist, arch):
    repository_url = prod_repository(collection, version, dist, arch)

    if arch == 'source':
        print(f"Syncing {collection} {version} Source RPM repository from {repository_url}")
    else:
        print(f"Syncing {collection} {version} RPM repository from {repository_url}")

    cmd = [
        'dnf',
        '--config',
        f'tmp/dnf.conf',
        'reposync',
        '--refresh',
        '--remote-time',
        '--download-metadata',
        '--norepopath',
        '--repo',
        f"{dist}-{collection}-{version}-{arch}",
        '--repofrompath',
        f"{dist}-{collection}-{version}-{arch},{repository_url}",
        '--download-path',
        target_dir
    ]

    if arch == 'source':
        cmd.extend([
            '--source',
        ])
    else:
        cmd.extend([
            '--exclude',
            '*.src',
        ])

    check_output(cmd)


def packages_from_comps(comps):
    dnf_comps = dnf.comps.Comps()

    try:
        dnf_comps._add_from_xml_filename(comps)
    except libcomps.ParserError:
        errors = comps.get_last_errors()
        raise CompsError(' '.join(errors))

    packages = set()
    for group in dnf_comps.groups:
        for package in group.default_packages:
            packages.add(package.name)

    return packages


def copr_repository(collection, version, dist, arch):
    return f"https://download.copr.fedorainfracloud.org/results/@theforeman/{collection}-{version}-staging/rhel-{dist.replace('el', '')}-{arch}"


def prod_repository(collection, version, dist, arch):
    if collection == "foreman":
        subdir = "releases"
    else:
        subdir = collection.replace('foreman-', '')

    if collection == 'katello':
        version = f'{version}/katello'

    return f"https://yum.theforeman.org/{subdir}/{version}/{dist}/{arch}"


def copr_repository_urls(repository):
    cmd = [
        'dnf',
        'reposync',
        '--urls',
        '--refresh',
        '--repofrompath',
        f"copr,{repository}",
        '--repo',
        'copr'
    ]

    urls = check_output(cmd, universal_newlines=True, stderr=STDOUT)
    return urls.split("\n")


def compare_repositories(new_repository, old_repository, arch, source=False):
    cmd = [
        'dnf',
        '--config',
        f'tmp/dnf.conf',
        'repodiff',
        '--simple',
        '--refresh',
        '--compare-arch',
        '--repofrompath',
        f"new,{new_repository}",
        '--repofrompath',
        f"old,{old_repository}",
        '--repo-old',
        'old',
        '--repo-new',
        'new'
    ]

    if not source:
        cmd.extend(['--arch', f'noarch,{arch}'])

    print(' '.join(cmd))
    return check_output(cmd, universal_newlines=True)


def parse_repodiff(diff):
    split_diff = diff.split("\n")
    packages = []

    for line in split_diff:
        if line.startswith('Added package  :'):
            packages.append(line.replace('Added package  : ', ''))
        elif ' -> ' in line:
            packages.append(line.split(' -> ')[1])

    return packages


def download_copr_packages(packages, urls, repository, downloads_dir, included_packages=None):
    for package in packages:
        name, version, release = package.rsplit('-', 2)

        if included_packages is None or name in included_packages:
            version_without_epoch = version.rsplit(':', 1)[-1]
            name = f"{name}-{version_without_epoch}-{release}.rpm"

            for url in urls:
                if name == os.path.basename(url):
                    download_url = url

            if not os.path.exists(f"{downloads_dir}/{name}"):
                print(f"Downloading {repository}/{name} to {downloads_dir}")
                try:
                  filename, headers = urlretrieve(download_url, f"{downloads_dir}/{name}")
                except ContentTooShortError:
                  try:
                    os.unlink(f"{downloads_dir}/{name}")
                  except OSError:
                    pass
                  raise
                if 'Last-Modified' in headers:
                  modification_ts = parsedate_to_datetime(headers['Last-Modified']).timestamp()
                  os.utime(filename, (modification_ts, modification_ts))
            else:
                print(f"Skipping {repository}/{name}. Already downloaded.")
        else:
            print(f"Skipping {package}. Package not present in comps.")


def handle_args():
    parser = argparse.ArgumentParser(description='Generate a stage repository')
    parser.add_argument(
        'collection',
        help='Repository to generate for (e.g. foreman)'
    )
    parser.add_argument(
        'version',
        help='Version to generate the repository for (e.g. nightly)'
    )
    parser.add_argument(
        'dist',
        help='Dist to generate repository for (e.g. el8)'
    )
    parser.add_argument(
        'foreman_version',
        nargs='?',
        help='Foreman Version for one specefic katello version'
    )
    return parser.parse_args()


def initialize_repository(collection, version, dist, arch, rpm_dir, srpm_dir):
    if version != 'nightly':
        sync_prod_repository(collection, version, rpm_dir, dist, arch)
        sync_prod_repository(collection, version, srpm_dir, dist, 'source')
    else:
        create_repository(rpm_dir)
        create_repository(srpm_dir)


def add_packages_from_copr(collection, version, dist, arch, rpm_dir, srpm_dir, foreman_version):
    packages_to_include = packages_from_comps(comps(collection, version, dist, foreman_version))
    copr_repo = copr_repository(collection, version, dist, arch)
    copr_package_urls = copr_repository_urls(copr_repo)

    rpm_diff = compare_repositories(copr_repo, rpm_dir, arch)
    packages = parse_repodiff(rpm_diff)
    download_copr_packages(packages, copr_package_urls, copr_repo, rpm_dir, packages_to_include)
    filter_packages(rpm_dir, packages_to_include)

    srpm_diff = compare_repositories(copr_repo, srpm_dir, arch, True)
    srpm_packages = parse_repodiff(srpm_diff)
    download_copr_packages(srpm_packages, copr_package_urls, copr_repo, srpm_dir)


def update_repositories(collection, version, dist, rpm_dir, srpm_dir, foreman_version):
    create_repository(rpm_dir)
    create_repository(srpm_dir)

    if collection in ['foreman'] or (collection in ['katello'] and dist == 'el8'):
        create_modulemd(collection, version, rpm_dir, foreman_version, dist)


def main():
    args = handle_args()

    collection = args.collection
    version = args.version
    dist = args.dist
    arch = 'x86_64'
    foreman_version = args.foreman_version or args.version

    base_dir = 'tmp'
    stage_dir = f"{base_dir}/{collection}/{version}/{dist}"
    rpm_dir = f"{stage_dir}/{arch}"
    srpm_dir = f"{stage_dir}/source"

    if not os.path.exists(rpm_dir):
        os.makedirs(rpm_dir)

    if not os.path.exists(srpm_dir):
        os.makedirs(srpm_dir)

    with open(f"{base_dir}/dnf.conf", "w") as dnf_conf:
        dnf_conf.write("[main]\nskip_if_unavailable=True")

    initialize_repository(collection, version, dist, arch, rpm_dir, srpm_dir)
    add_packages_from_copr(collection, version, dist, arch, rpm_dir, srpm_dir, foreman_version)
    update_repositories(collection, version, dist, rpm_dir, srpm_dir, foreman_version)


if __name__ == '__main__':
    main()
